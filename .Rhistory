library(data.table)
library(magrittr)
library(ggplot2)
dat <- fread("bank-full.csv")
# correlations between features ================================================
num_select <- dat[sample, .(age, balance, duration, campaign, pdays, previous)]
# correlations between features ================================================
num_select <- dat[sample(1:nrow(.), 1000),
.(age, balance, duration, campaign, pdays, previous)]
# correlations between features ================================================
num_select <- dat[sample(1:nrow(dat), 1000),
.(age, balance, duration, campaign, pdays, previous)]
pairs(num_select)
cor(num_select)
plot(dat$previous, dat$pdays)
plot(dat$previous, dat$pdays, xlim = c(0, 50))
ggplot(dat, aes(previous, pdays)) +
geom_jitter()
ggplot(dat, aes(previous, pdays)) +
geom_jitter() +
xlim(0, 50)
ggplot(dat, aes(previous, pdays)) +
geom_boxplot() +
xlim(0, 50)
ggplot(dat, aes(as.factor(previous), pdays)) +
geom_boxplot() +
xlim(0, 50)
ggplot(dat, aes(as.factor(previous), pdays)) +
geom_boxplot()
ggplot(dat, aes(as.factor(previous), pdays)) +
geom_boxplot() +
geom_jitter(width = 0.1)
ggplot(dat, aes(as.factor(previous), pdays)) +
geom_boxplot() +
geom_jitter(width = 0.1, size = 1)
library(caret)
library(data.table)
library(magrittr)
library(ggplot2)
library(caret)
dat <- fread("bank-full.csv")
?confusionMatrix
names(dat)
X <- dat[, -y]
dim(dat)
X <- dat[, 1:16]
X
y <- as.factor(dat$y)
y
in_train <- createDataPartition(y, p = 0.8, list = FALSE)
X_train <- X[in_train, ]
y_train <- y[in_train]
X_test <- X[-in_train,]
y_test <- y[-in_train]
library(randomForest)
# a quick random forest model =================================================
rf <- randomForest(X_train, y_train)
str(data)
str(dat)
dat <- fread("bank-full.csv", stringsAsFactors = TRUE)
X <- dat[, 1:16]
y <- as.factor(dat$y)
in_train <- createDataPartition(y, p = 0.8, list = FALSE)
X_train <- X[in_train, ]
y_train <- y[in_train]
X_test <- X[-in_train,]
y_test <- y[-in_train]
# a quick random forest model =================================================
rf <- randomForest(X_train, y_train)
y_pred <- predict(rf, X_test)
confusionMatrix(y_pred, y_test)
dat <- fread("bank-full.csv", stringsAsFactors = TRUE)
X <- dat[, 1:16]
y <- as.factor(dat$y, levels = c("yes", "no"))
?as.factor
y <- factor(dat$y, levels = c("yes", "no"))
y
dat <- fread("bank-full.csv", stringsAsFactors = TRUE)
X <- dat[, 1:16]
y <- factor(dat$y, levels = c("yes", "no"))
in_train <- createDataPartition(y, p = 0.8, list = FALSE)
X_train <- X[in_train, ]
y_train <- y[in_train]
X_test <- X[-in_train,]
y_test <- y[-in_train]
# a quick random forest model =================================================
rf <- randomForest(X_train, y_train)
y_pred <- predict(rf, X_test)
confusionMatrix(y_pred, y_test)
?randomForest
# a quick random forest model =================================================
rf <- randomForest(X_train, y_train, classwt = c(0.9, 0.1))
y_pred <- predict(rf, X_test)
confusionMatrix(y_pred, y_test)
# a quick random forest model =================================================
rf <- randomForest(X_train, y_train, classwt = c(0.1, 0.9))
y_pred <- predict(rf, X_test)
confusionMatrix(y_pred, y_test)
# a quick random forest model =================================================
N <- nrow(X_train)
y == "yes"
y
table(y)
y == 1
table(y_train)
table(y_train) -> aaa
class(aaa)
vector(aaa)
as.vector(aaa)
sample_size <- as.vector(table(y_train))
# a quick random forest model =================================================
sample_size <- as.vector(table(y_train))
rf <- randomForest(X_train, y_train, sampsize = sample_size, strata = y_train)
y_pred <- predict(rf, X_test)
confusionMatrix(y_pred, y_test)
library(rose)
install.packages("rose")
library(ROSE)
install.packages("ROSE")
library(ROSE)
?ovun.sample
?createDataPartition
set.seed(1234)
in_train <- createDataPartition(dat$y, p = 0.8, list = FALSE)
# read data and set "yes" as positive class
dat <- fread("bank-full.csv", stringsAsFactors = TRUE) %>%
.[, y = factor(dat$y, levels = c("yes", "no"))]
# read data and set "yes" as positive class
dat <- fread("bank-full.csv", stringsAsFactors = TRUE) %>%
.[, y := factor(dat$y, levels = c("yes", "no"))]
set.seed(1234)
in_train <- createDataPartition(dat$y, p = 0.8, list = FALSE)
dat_train <- dat[in_train,]
dat_test <- dat[-in_train]
dat_test <- dat[-in_train,]
# over sampling train data
train_over <- ovun.sample(
y ~.,
data = dat_train,
method = "over",
seed = 4321
)
# over sampling train data
train_over <- ovun.sample(
y ~.,
data = dat_train,
method = "over",
seed = 4321
)$data
table(train_over$y)
X_train <- train_over[, 1:16]
y_train <- train_over$y
str(dat)
X_test <- dat_test[, 1:16]
y_test <-dat_test$y
str(train_over)
class(train_over)
# read data and set "yes" as positive class
dat <- read.csv("bank-full.csv", stringsAsFactors = TRUE)
set.seed(1234)
in_train <- createDataPartition(dat$y, p = 0.8, list = FALSE)
dat$age.job.marital.education.default.balance.housing.loan.contact.day.month.duration.campaign.pdays.previous.poutcome.y
dat$y
# read data and set "yes" as positive class
dat <- read.csv("bank-full.csv", stringsAsFactors = TRUE, sep = ";")
set.seed(1234)
in_train <- createDataPartition(dat$y, p = 0.8, list = FALSE)
dat_train <- dat[in_train,]
dat_test <- dat[-in_train,]
# over sampling train data
train_over <- ovun.sample(
y ~.,
data = dat_train,
method = "over",
seed = 4321
)$data %>%
as.data.frame.table() %>%
X_train <- train_over[, 1:16]
# over sampling train data
train_over <- ovun.sample(
y ~.,
data = dat_train,
method = "over",
seed = 4321
)$data
# read data and set "yes" as positive class
dat <- read.csv("bank-full.csv", stringsAsFactors = TRUE, sep = ";")
set.seed(1234)
in_train <- createDataPartition(dat$y, p = 0.8, list = FALSE)
dat_train <- dat[in_train,]
dat_test <- dat[-in_train,]
# over sampling train data
train_over <- ovun.sample(
y ~.,
data = dat_train,
method = "over",
seed = 4321
)$data
str(train_over)
X_train <- train_over[, 1:16]
y_train <- factor(train_over$y, levels = c("yes", "no"))
X_test <- dat_test[, 1:16]
y_test <- factor(dat_test$y, levels = c("yes", "no"))
# a quick random forest model =================================================
rf <- randomForest(X_train, y_train, sampsize = sample_size, strata = y_train)
# a quick random forest model =================================================
rf <- randomForest(X_train, y_train)
y_pred <- predict(rf, X_test)
confusionMatrix(y_pred, y_test)
# caret =======================================================================
train_control <- trainControl(
method = "oob",
search = "grid",
verboseIter = TRUE
)
# caret =======================================================================
train_control <- trainControl(
method = "oob",
search = "grid",
verboseIter = TRUE
)
tune_grid <- expand.grid(
mtry = 2:6
)
metric <- "Accuracy"
rf <- train(
X_train, y_train,
method = "rf",
trControl = train_control,
tuneGrid = tune_grid
)
plot(rf)
y_pred <- predict(rf$finalModel, X_test)
confusionMatrix(y_pred, y_test)
library(data.table)
library(magrittr)
library(ggplot2)
library(caret)
library(ROSE)
library(randomForest)
library(doSNOW)
cl <- makeCluster(3)
registerDoSNOW(cl)
# read data and set "yes" as positive class
dat <- read.csv("bank-full.csv", stringsAsFactors = TRUE, sep = ";")
set.seed(1234)
in_train <- createDataPartition(dat$y, p = 0.8, list = FALSE)
dat_train <- dat[in_train,]
dat_test <- dat[-in_train,]
# over-sampling train data
train_over <- ovun.sample(
y ~.,
data = dat_train,
method = "over",
seed = 4321
)$data
X_train <- train_over[, 1:16]
y_train <- factor(train_over$y, levels = c("yes", "no"))
X_test <- dat_test[, 1:16]
y_test <- factor(dat_test$y, levels = c("yes", "no"))
# caret =======================================================================
train_control <- trainControl(
method = "oob",
search = "grid",
verboseIter = TRUE
)
tune_grid <- expand.grid(
mtry = 2:6
)
metric <- "ROC"
rf <- train(
X_train, y_train,
method = "rf",
trControl = train_control,
tuneGrid = tune_grid
)
plot(rf)
y_pred <- predict(rf$finalModel, X_test)
confusionMatrix(y_pred, y_test)
